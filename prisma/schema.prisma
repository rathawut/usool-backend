// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  ACTIVE
  INACTIVE
  DELETED
}

model User {
  id          Int        @id @default(autoincrement())
  imageId     Int?
  idNumber    String?    @db.VarChar(255)
  displayName String     @db.VarChar(255)
  titleName   String?    @db.VarChar(255)
  firstName   String?    @db.VarChar(255)
  middleName  String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  birthdate   DateTime?
  phoneNumber String?    @db.VarChar(255)
  email       String?    @db.VarChar(255)
  address     String?    @db.VarChar(255)
  note        String?    @db.VarChar(255)
  status      UserStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authPassword AuthPassword?
  accessTokens AccessToken[]

  createdProjects Project[] @relation("createdByInProject")
  updatedProjects Project[] @relation("updatedByInProject")

  createdTexts Text[] @relation("createdByInText")
  updatedTexts Text[] @relation("updatedByInText")

  createdTranslations Translation[] @relation("createdByInTranslation")
  updatedTranslations Translation[] @relation("updatedByInTranslation")

  createdComments Comment[] @relation("createdByInComment")
  updatedComments Comment[] @relation("updatedByInComment")

  @@map("user")
}

model AuthPassword {
  id          Int     @id @default(autoincrement())
  userId      Int
  username    String  @unique @db.VarChar(255)
  password    String  @db.VarChar(255)
  activeToken String? @db.VarChar(255)
  resetToken  String? @db.VarChar(255)

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("auth_password")
}

enum AuthStrategy {
  PASSWORD
}

enum AccessTokenStatus {
  ACTIVE
  INACTIVE
  DELETED
}

model AccessToken {
  id                   Int               @id @default(autoincrement())
  userId               Int
  token                String            @unique @db.VarChar(255)
  authStrategy         AuthStrategy
  info                 Json?
  fcmRegistrationToken String?           @db.VarChar(1024)
  otpNumber            Int?
  status               AccessTokenStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("access_token")
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  DELETED
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(255)
  description String?
  status      ProjectStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy Int
  updatedBy Int

  creator User @relation(name: "createdByInProject", fields: [createdBy], references: [id])
  updater User @relation(name: "updatedByInProject", fields: [updatedBy], references: [id])

  texts Text[]

  @@map("project")
}

enum TextStatus {
  ACTIVE
  INACTIVE
  DELETED
}

model Text {
  id        Int        @id @default(autoincrement())
  projectId Int
  book      Int?
  page      Int?
  chapter   Int?
  sequence  Int?
  content   String
  status    TextStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy Int
  updatedBy Int

  project Project @relation(fields: [projectId], references: [id])

  creator User @relation(name: "createdByInText", fields: [createdBy], references: [id])
  updater User @relation(name: "updatedByInText", fields: [updatedBy], references: [id])

  translations Translation[]

  @@map("text")
}

enum TranslationLanguage {
  EN
  TH
}

enum TranslationStatus {
  ACTIVE
  INACTIVE
  DELETED
}

model Translation {
  id               Int                 @id @default(autoincrement())
  textId           Int
  refTranslationId Int?
  language         TranslationLanguage
  content          String
  status           TranslationStatus   @default(ACTIVE)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  createdBy        Int
  updatedBy        Int

  text           Text         @relation(fields: [textId], references: [id])
  refTranslation Translation? @relation(name: "refTranslationIdInTranslation", fields: [refTranslationId], references: [id])

  creator User @relation(name: "createdByInTranslation", fields: [createdBy], references: [id])
  updater User @relation(name: "updatedByInTranslation", fields: [updatedBy], references: [id])

  comments     Comment[]
  translations Translation[] @relation("refTranslationIdInTranslation")

  @@map("translation")
}

enum CommentApproval {
  APPROVE
  REJECT
}

enum CommentStatus {
  ACTIVE
  INACTIVE
  DELETED
}

model Comment {
  id            Int              @id @default(autoincrement())
  translationId Int
  content       String?
  approval      CommentApproval?
  status        CommentStatus    @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy Int
  updatedBy Int

  translation Translation @relation(fields: [translationId], references: [id])

  creator User @relation(name: "createdByInComment", fields: [createdBy], references: [id])
  updater User @relation(name: "updatedByInComment", fields: [updatedBy], references: [id])

  @@map("comment")
}
